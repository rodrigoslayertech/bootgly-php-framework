#!/usr/bin/env php
<?php
/*
 * --------------------------------------------------------------------------
 * Bootgly PHP Framework
 * Developed by Rodrigo Vieira (@rodrigoslayertech)
 * Copyright 2023-present
 * Licensed under MIT
 * --------------------------------------------------------------------------
 */

namespace Bootgly;


require __DIR__ . '/../autoload.php';


use Bootgly\ACI\Events\Timer;
use Bootgly\WPI\interfaces\TCP;


$TCP_Client = new TCP\Client(
   TCP\Client::MODE_MONITOR
);
$TCP_Client->configure(
   host: '127.0.0.1',
   port: getenv('PORT') ? getenv('PORT') : 8080,
   workers: 1
);
// TODO move to /projects
// This runs a Benchmark for 10 seconds with 1 Worker \
// type stats command in Server to get stats of writes
$TCP_Client->on(
   // on Worker instance
   instance: function ($Client) {
      // @ Connect to Server
      $Socket = $Client->connect();

      if ($Socket) {
         // @ Call Event loop
         #if ($Socket) {
         #   $this->Client::$Event->add($Socket, Select::EVENT_CONNECT, true);
         #}

         $Client::$Event->loop();
      }
   },
   // on Connection connect
   connect: function ($Socket, $Connection) {
      // @ Set Connection expiration
      Timer::add(
         interval: 10,
         handler: function ($Connection) {
            $Connection->close();
         },
         args: [$Connection],
         persistent: false
      );

      // @ Set Data raw to write
      $Connection::$output = "GET / HTTP/1.1\r\nHost: localhost:8080\r\n\r\n";

      // @ Add Package write to Event loop
      TCP\Client::$Event->add($Socket, TCP\Client::$Event::EVENT_WRITE, $Connection);
   },
   disconnect: function ($Connection) use($TCP_Client) {
      $TCP_Client->log(
         'Connection #' . $Connection->id . ' (' . $Connection->ip . ':' . $Connection->port . ')'
         . ' from Worker with PID @_' . $TCP_Client->Process->id . '_@ was closed! @\;'
      );
   },
   // on Package write / read
   write: function ($Socket, $Connection, $Package) {
      // @ Add Package read to Event loop
      TCP\Client::$Event->add($Socket, TCP\Client::$Event::EVENT_READ, $Connection);
   },
   read: null,
);
$TCP_Client->start();
